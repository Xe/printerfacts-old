// Code generated by protoc-gen-twirp_metrics v0.0.1, DO NOT EDIT.
// source: printerfacts.proto

package printerfacts

import "context"
import "time"
import "github.com/go-kit/kit/metrics"
import "github.com/go-kit/kit/metrics/provider"

// PrinterfactsMetrics is a middleware for Printerfacts that collects timing and error rate data for servers.
type PrinterfactsMetrics struct {
	Next Printerfacts
	FactErrorCount metrics.Counter
	FactDurationNS metrics.Histogram
}

func NewPrinterfactsMetrics(next Printerfacts, prov provider.Provider) Printerfacts {
	var result PrinterfactsMetrics
	result.Next = next
	result.FactErrorCount = prov.NewCounter(`twirp.us.xeserv.api.printerfacts.fact.error.count`)
	result.FactDurationNS = prov.NewHistogram(`twirp.us.xeserv.api.printerfacts.fact.duration.ns`, 20)
	return result
}

func (i PrinterfactsMetrics) Fact(ctx context.Context, input *FactParams) (result *Facts, err error) {
	defer func(begin time.Time) {
		i.FactDurationNS.Observe(float64(time.Since(begin)))
		if err != nil {
			i.FactErrorCount.Add(1)
		}
	}(time.Now())

	result, err = i.Next.Fact(ctx, input)
	return
}

